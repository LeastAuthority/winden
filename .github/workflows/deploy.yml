---
name: Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deploy target environment"
        type: choice
        options:
          - stage
          - prod
        required: true
#  workflow_run:
#    workflows: [transfer-repo-CI]
#    types: [completed]
#    branches: [main]

jobs:
  deploy:
    # `if` required because a workflow run is triggered regardless of
    # the result of the previous workflow (see the documentation page)
    #    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Deploy
    runs-on: ubuntu-22.04
    env:
      TEST_ENV: foobar
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Cache docker images
        uses: ScribeMD/docker-cache@0.3.3
        with:
          key: |
            docker-${{ runner.os }}-${{ hashFiles(
              'docker-compose*.yml',
              'client/Dockerfile',
              'client-e2e/Dockerfile',
              'client-e2e/images/Dockerfile.*'
            ) }}

      - name: create variables for production env.
        if: inputs.environment == 'prod'
        run: |
          echo "MAILBOX_URL=wss://mailbox.winden.app/v1" >> $GITHUB_ENV
          echo "RELAY_URL=wss://relay.winden.app/" >> $GITHUB_ENV

      - name: create variables for stage env.
        if: inputs.environment == 'stage'
        run: |
          echo "MAILBOX_URL=wss://mailbox.stage.winden.app/v1" >> $GITHUB_ENV
          echo "RELAY_URL=wss://relay.stage.winden.app/" >> $GITHUB_ENV

      - name: create config .env file
        run: |
          touch ./client/.env
          cat <<EOF >> ./client/.env
          MAILBOX_URL="${{ env.MAILBOX_URL }}"
          RELAY_URL="${{ env.RELAY_URL }}"
          SFTP_HOSTNAME=${{ secrets.SFTP_HOSTNAME }}
          SFTP_USERNAME=${{ secrets.SFTP_USERNAME }}
          SFTP_IDENTITY="${{ secrets.SFTP_IDENTITY }}"
          NODE_ENV=production
          ENVIRONMENT=${{ inputs.environment }}
          EOF
          touch ./client-e2e/.env

      - name: build image - if not cached
        run: |
          repository=${{ github.repository }}
          docker images --quiet ${repository##*/}_client:latest | grep -v "^$" || \
          docker compose --progress=plain -f docker-compose.yml -f docker-compose.e2e.yml --profile e2e \
          build --build-arg uid=$(id -u) --build-arg gid=${_GID} client

      - name: prepare
        run: |
          docker compose run --no-deps client npm i

      - name: deploy
        run: docker-compose run --no-deps client npm run deploy

      - name: tear down
        run: docker-compose down
